Menu="Utilities"
Type="xmenu"
Title="Storecast"
Icon="sun-o"
Tag="sun-o"
Markdown="false"
---
<?php
if(isset($display['theme']) && $display['theme']) {
    switch ($display['theme']) {
      case 'white': $theme = 'light'; break;
      case 'black': $theme = 'dark'; break;
      case 'azure': $theme = 'light'; break;
      case 'gray' : $theme = 'dark'; break;
      default     : $theme = 'light'; break;
    }
} else { $theme = 'light'; }
?>

<script src="<?autov('/webGui/javascript/jquery.apexcharts.js')?>"></script>

<table class="tablesorter shift">
<thead>
    <tr>
        <th>
            <i class="dwstorecasticon fa fa-cog fa-spin" style="display:none;"></i> <strong>Storage Forecast</strong>
            <span style="float:right;margin-right:10px"><strong>Collected:</strong> <span class="dwstorecastupdated">n/a</span></span>
        </th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>
            <div id="chart"></div>
        </td>
    </tr>
</tbody>
</table>

<table class="tablesorter">
<thead>
    <tr>
        <th>
            <i class="dwstorecasticon fa fa-cog fa-spin" style="display:none;"></i> <strong>Storage Forecast - Details</strong>
            <span style="float:right;margin-right:10px"><strong>Collected:</strong> <span class="dwstorecastupdated">n/a</span></span>
        </th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>
            <pre id="dwstorecastlog">
Waiting for Forecast...
            </pre>
        </td>
    </tr>
</tbody>
</table>

<script>
    let chart;
    const availableSpace = <?=json_encode(disk_total_space('/mnt/user/'))?>;

    const options = {
        chart: {
            type: 'line',
            height: 400,
            toolbar: { show: false },
            zoom: { enabled: false },
            animations: { enabled: false },
        },
        series: [],
        colors: ['#007BFF', '#007BFF', '#C63821', '#EA9000'],
        xaxis: {
            type: 'datetime',
            title: { text: 'Time' },
        },
        yaxis: {
            title: { text: 'Storage' },
            labels: {
                formatter: function(value) {
                    return formatBytes(value);
                },
            },
        },
        noData: {
            text: 'Waiting for Forecast...',
            align: 'center',
            verticalAlign: 'middle',
            style: {
                color: '#666',
                fontSize: '16px',
            },
        },
        legend: {
            horizontalAlign: 'right',
        },
        annotations: {
            yaxis: [{
                y: 0,
                y2: availableSpace,
                fillColor: '#D7F6D5',
                label: {
                    style: { color: '#fff', background: '#387B1D' },
                    text: `Installed Storage (${formatBytes(availableSpace)})`,
                },
            }],
        },
        stroke: {
            width: [2, 2, 1, 1],
            dashArray: [0, 4, 4, 4],
        },
        markers: {
            size: 4,
        },
        tooltip: {
            x: { format: 'yyyy-MM-dd' },
            y: {
                formatter: function(value) {
                    return formatBytes(value);
                },
            },
        },
        theme: { mode:'<?=$theme?>' },
    };

    function formatBytes(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1000;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function fetchChartData() {
        return $.ajax({
            url: '<?autov('/plugins/dwstorecast/storecast.json')?>',
            dataType: 'json',
        }).then((data) => {
            if (!data.history || !data.forecast) {
                chart.updateOptions({
                    noData: {
                        text: 'Waiting for Forecast...',
                        align: 'center',
                        verticalAlign: 'middle',
                        style: { color: '#666', fontSize: '16px' },
                    },
                });
                return { history: [], forecast: [], forecastUp: [], forecastDown: [] };
            }

            if (data.history.length > 0 && data.forecast.length > 0) {
                const lastHistoryPoint = data.history[data.history.length - 1];
                const firstForecastPoint = data.forecast[0];
                if (lastHistoryPoint.x !== firstForecastPoint.x) {
                    data.forecast.unshift({ x: lastHistoryPoint.x, y: lastHistoryPoint.y });
                }
            }

            const forecastWithDeviation = data.forecast.map((dp, index) => {
                const yUp = dp.y * 1.2;
                const yDown = dp.y * 0.8;
                // if (index === 0) {
                //     return {
                //         x: dp.x,
                //         y: dp.y,
                //         yUp: dp.y, // Connect to last history point
                //         yDown: dp.y // Connect to last history point
                //     };
                // }
                return { x: dp.x, y: dp.y, yUp, yDown };
            });

            return {
                history: data.history.map((dp) => ({ x: dp.x, y: dp.y })),
                forecast: forecastWithDeviation.map((dp) => ({ x: dp.x, y: dp.y })),
                forecastUp: forecastWithDeviation.map((dp) => ({ x: dp.x, y: dp.yUp })),
                forecastDown: forecastWithDeviation.map((dp) => ({ x: dp.x, y: dp.yDown })),
            };
        }).catch((error) => {
            console.error('Error loading chart data:', error);
            chart.updateOptions({
                noData: {
                    text: 'Failed to load forecast. Please try again later.',
                    align: 'center',
                    verticalAlign: 'middle',
                    style: { color: '#FF0000', fontSize: '16px' },
                },
            });
        });
    }

    function updateChart() {
        clearTimeout(timers.updateStorecast);
        fetchChartData()
            .then((chartData) => {
                if (!chartData) return;
                chart.updateSeries([
                    { name: 'History', data: chartData.history },
                    { name: 'Forecast', data: chartData.forecast },
                    { name: 'Forecast +20%', data: chartData.forecastUp },
                    { name: 'Forecast -20%', data: chartData.forecastDown },
                ]);
            })
            .catch((error) => {
                console.error('Error fetching chart data:', error);
                chart.updateOptions({
                    noData: {
                        text: 'Failed to load forecast. Please try again later.',
                        align: 'center',
                        verticalAlign: 'middle',
                        style: { color: '#FF0000', fontSize: '16px' },
                    },
                });
            })
            .always(() => {
                timers.updateStorecast = setTimeout(updateChart, 10000);
            });
    }

    function updateLogs() {
        clearTimeout(timers.updateStorecastLog);
        $.get('/plugins/dwstorecast/include/dwstorecast_log.php', function(data) {
            if (data && data.response) {
                if (data.running) {
                    $('.dwstorecasticon').show();
                    $('.dwstorecastupdated').hide();
                } else {
                    $('.dwstorecasticon').hide();
                    $('.dwstorecastupdated').show();
                }
                if(data.modtime) {
                    $('.dwstorecastupdated').text(data.modtime);
                } else {
                    $('.dwstorecastupdated').text("n/a");
                }
                $('#dwstorecastlog').html(data.response);
            }
        }, 'json').always(function() {
            timers.updateStorecastLog = setTimeout(updateLogs, 10000);
        });
    }

    $(function() {
        chart = new ApexCharts($('#chart')[0], options);
        chart.render();
        updateChart();
        updateLogs();
    });
</script>
